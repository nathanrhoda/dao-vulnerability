// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;
import "./Wallet.sol";

contract Fundraiser {
    mapping(address=>uint) balances;

    // VULNERABLE
    function withdrawCoins() public {
        uint withdrawAmount = balances[msg.sender];

        // To prevent Dao attack make balance zero before transferring
        balances[msg.sender] = 0;

        Wallet wallet = Wallet(msg.sender);
        wallet.payout.value(withdrawAmount)();

        // this line is not reached before the next recursion!!
        //balances[msg.sender] = 0;
    }

    function getBalance() public returns (uint) {
        return address(this).balance;
    }

    function contribute() public payable {
        balances[msg.sender] += msg.value;
    }

    function() external payable {

    }
}